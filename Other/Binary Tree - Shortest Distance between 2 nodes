
public class Main
{
    
    TreeNode LCA(TreeNode root, int n1, int n2)
    {
        if(root==null)return(null);
        if(root.val==n1 || root.val==n2)return(root);
        
        
        TreeNode left = LCA(root.left, n1, n2);         //traverse left subtree
        TreeNode right = LCA(root.right, n1, n2);       //traverse right subtree
        
        if(left!=null && right!=null)return(root);      //if both are not null then it will traverse through all nodes to recursively back and return last common node 
        if(left == null && right == null)return(null); 
        
        if(left!=null)return(LCA(root.left,n1,n2));     //if right is null
        if(right!=null)return(LCA(root.right,n1,n2));   //if left is null
            
    }
    
    int dist(TreeNode root, int k, int dis)
    {
        if(root==null)return(-1);
        if(root.data==k)return(dis);
        
        int leftDis = dist(root.left, k, dist+1);
        if(left!=-1)return(left);                 //if k is in left subtree
        return(dist(root.right, k, dist+1));      //root in right subtree
        
    }
    
    
    void Dis(TreeNode root, int n1, int n2)
    {
        TreeNode lca = LCA(root, n1, n2);           //find out lowest common ancestor
        int d1 = dist(root.left, n1, 0);            //dis of lca from n1
        int d2 = dist(root.right, n2, 0);           //dis of lca from n2
        
        System.out.println("Shortest Distance = "d1+d2);
    }
    
	public static void main(String[] args) {
		System.out.println("Hello World");
	}
}
