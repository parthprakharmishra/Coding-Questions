/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    List<Integer> l = new LinkedList<>();
    public List<Integer> distanceK(TreeNode root, TreeNode target, int k) {
        
        NodesAtk(root, target, k);
        return(l);
    }
    
    void Subtree(TreeNode root, int k)
    {
        if(root==null || k<0)return;
        if(k==0)l.add(root.val);
        Subtree(root.left, k-1);
        Subtree(root.right, k-1);
    }
    
    int NodesAtk(TreeNode root, TreeNode target, int k)
    {
        if(root==null)return(-1);
        if(root==target)
        {
            Subtree(root, k);
            return(0);
        }
        
        int dl = NodesAtk(root.left, target, k);  //1st search for node in left subtree
        if(dl!=-1)                                  //Node found in left subtree
        {
            if(dl+1==k)l.add(root.val);        //Node found at just prev/next level
            else Subtree(root.right, k-dl-2);  //call subtree func
            return(1+dl);
        }
        
        
        
        int dr = NodesAtk(root.right, target, k);  //Now search for node in right subtree
        if(dr!=-1)                                  //Node found in right subtree
        {
            if(dr+1==k)l.add(root.val);        //Node found at just prev/next level
            else Subtree(root.left, k-dr-2);  //call subtree func
            return(1+dr);
        }
        return(-1);                 //not found
    }
}
