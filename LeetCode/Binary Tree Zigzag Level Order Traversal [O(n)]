/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        
        
        List<List<Integer>> zig = new LinkedList<List<Integer>>();
        if(root==null)return(zig);
        
        Stack<TreeNode> currLevel = new Stack<>();
        Stack<TreeNode> nextLevel = new Stack<>();
        boolean leftToRight = true;
        currLevel.push(root);
        ArrayList<Integer> tmp1 = new ArrayList<>();
        
        while(currLevel.isEmpty()==false)
        {
            List<Integer> zag = new LinkedList<>();
            TreeNode tmp = currLevel.pop();
            
            if(tmp!=null)
            {
                zag.add(tmp.val); //3, 9
                if(leftToRight==false)
                {
                    if(tmp.right!=null)nextLevel.push(tmp.right);
                    if(tmp.left!=null)nextLevel.push(tmp.left);
                }
                else
                {
                    if(tmp.left!=null)nextLevel.push(tmp.left);
                    if(tmp.right!=null)nextLevel.push(tmp.right);
                }
            }
            tmp1.addAll(zag); //3, 9, 20
            if(currLevel.isEmpty()==true)
            {
                leftToRight=!leftToRight;
                currLevel.addAll(nextLevel);//9 20
                nextLevel.clear();
                //System.out.println(tmp1+" d");
                zig.add(tmp1);
                
                tmp1=new ArrayList<Integer>();
                //System.out.println(zig+" w");
            }
            //System.out.println(zag);
             
            
        }
        
        return(zig); 
    }
}
